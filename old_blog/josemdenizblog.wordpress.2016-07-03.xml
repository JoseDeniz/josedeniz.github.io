<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.5.2" created="2016-07-03 20:41" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Jose M. Deniz Blog</title>
	<link>http://josemanueldeniz.es</link>
	<description>Share what you learn</description>
	<pubDate>Sun, 03 Jul 2016 20:41:05 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://josemanueldeniz.es</wp:base_site_url>
	<wp:base_blog_url>http://josemanueldeniz.es</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[josedeniz]]></wp:author_login><wp:author_email><![CDATA[josema13992@gmail.com]]></wp:author_email><wp:author_display_name><![CDATA[josedeniz]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>2</wp:term_id><wp:category_nicename><![CDATA[java]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[Java]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>7</wp:term_id><wp:category_nicename><![CDATA[java-8]]></wp:category_nicename><wp:category_parent><![CDATA[java]]></wp:category_parent><wp:cat_name><![CDATA[Java 8]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>15</wp:term_id><wp:category_nicename><![CDATA[libros]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[Libros]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename><![CDATA[uncategorized]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name></wp:category>
	<wp:tag><wp:term_id>19</wp:term_id><wp:tag_slug><![CDATA[catch]]></wp:tag_slug><wp:tag_name><![CDATA[catch]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>11</wp:term_id><wp:tag_slug><![CDATA[date]]></wp:tag_slug><wp:tag_name><![CDATA[Date]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>9</wp:term_id><wp:tag_slug><![CDATA[datetime]]></wp:tag_slug><wp:tag_name><![CDATA[DateTime]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>20</wp:term_id><wp:tag_slug><![CDATA[functional-programming]]></wp:tag_slug><wp:tag_name><![CDATA[functional programming]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>4</wp:term_id><wp:tag_slug><![CDATA[java]]></wp:tag_slug><wp:tag_name><![CDATA[Java]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>10</wp:term_id><wp:tag_slug><![CDATA[java8]]></wp:tag_slug><wp:tag_name><![CDATA[Java8]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>21</wp:term_id><wp:tag_slug><![CDATA[javaslang]]></wp:tag_slug><wp:tag_name><![CDATA[javaslang]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>6</wp:term_id><wp:tag_slug><![CDATA[kata]]></wp:tag_slug><wp:tag_name><![CDATA[Kata]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>16</wp:term_id><wp:tag_slug><![CDATA[libros]]></wp:tag_slug><wp:tag_name><![CDATA[Libros]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>17</wp:term_id><wp:tag_slug><![CDATA[monad]]></wp:tag_slug><wp:tag_name><![CDATA[monad]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>14</wp:term_id><wp:tag_slug><![CDATA[refactor]]></wp:tag_slug><wp:tag_name><![CDATA[Refactor]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>5</wp:term_id><wp:tag_slug><![CDATA[reflection]]></wp:tag_slug><wp:tag_name><![CDATA[Reflection]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>12</wp:term_id><wp:tag_slug><![CDATA[stream]]></wp:tag_slug><wp:tag_name><![CDATA[Stream]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>13</wp:term_id><wp:tag_slug><![CDATA[tell-dont-ask]]></wp:tag_slug><wp:tag_name><![CDATA[Tell-Don't-Ask]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>18</wp:term_id><wp:tag_slug><![CDATA[try]]></wp:tag_slug><wp:tag_name><![CDATA[try]]></wp:tag_name></wp:tag>
	<wp:term><wp:term_id><![CDATA[19]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[catch]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[catch]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[11]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[date]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[Date]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[9]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[datetime]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[DateTime]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[20]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[functional-programming]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[functional programming]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[2]]></wp:term_id><wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy><wp:term_slug><![CDATA[java]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[Java]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[4]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[java]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[Java]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[7]]></wp:term_id><wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy><wp:term_slug><![CDATA[java-8]]></wp:term_slug><wp:term_parent><![CDATA[java]]></wp:term_parent><wp:term_name><![CDATA[Java 8]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[10]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[java8]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[Java8]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[21]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[javaslang]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[javaslang]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[6]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[kata]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[Kata]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[15]]></wp:term_id><wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy><wp:term_slug><![CDATA[libros]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[Libros]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[16]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[libros]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[Libros]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[17]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[monad]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[monad]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[14]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[refactor]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[Refactor]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[5]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[reflection]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[Reflection]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[12]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[stream]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[Stream]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[13]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[tell-dont-ask]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[Tell-Don't-Ask]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[18]]></wp:term_id><wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy><wp:term_slug><![CDATA[try]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[try]]></wp:term_name></wp:term>
	<wp:term><wp:term_id><![CDATA[1]]></wp:term_id><wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy><wp:term_slug><![CDATA[uncategorized]]></wp:term_slug><wp:term_parent><![CDATA[]]></wp:term_parent><wp:term_name><![CDATA[Uncategorized]]></wp:term_name></wp:term>

	<generator>https://wordpress.org/?v=4.5.2</generator>

	<item>
		<title>¡Hola Mundo!</title>
		<link>http://josemanueldeniz.es/hola-mundo/</link>
		<pubDate>Thu, 30 Jul 2015 23:08:05 +0000</pubDate>
		<dc:creator><![CDATA[josedeniz]]></dc:creator>
		<guid isPermaLink="false">http://188.226.218.6/?p=1</guid>
		<description></description>
		<content:encoded><![CDATA[<p style="text-align: justify;">Muy buenas a todos (¡sobretodo a mi futuro yo!). Gracias a los consejos de mis compañeros <a href="https://twitter.com/RonnyAncorini" target="_blank">Ronny</a>, <a href="https://twitter.com/Groxalf_Esp" target="_blank">Miguel</a>, <a href="https://twitter.com/Angelossz" target="_blank">Angelo</a>, <a href="https://twitter.com/juandvegarguez" target="_blank">Juan</a> y <a href="https://twitter.com/SuuiGD" target="_blank">Dani</a>, además de la influencia de <a href="https://twitter.com/carlosble" target="_blank">Carlos Blé</a>, he decidido comenzar a escribir un blog.</p>
<p style="text-align: justify;">Soy un estudiante de ingeniería informática al que le apasiona desarrollar software y hace casi un año empecé a introducirme en el movimiento de Software Craftsmanship.</p>
<p style="text-align: justify;">Recientemente, hemos terminado en nuestro club de lectura el libro de <em><a href="http://www.amazon.es/Apprenticeship-Patterns-Guidance-Aspiring-Craftsman/dp/0596518382" target="_blank">Apprenticeship Patterns</a></em>. En el que, entre muy buenos consejos que un aprendiz debe llevar a cabo, destaca uno en el que te invita a hacerte un blog para compartir tus conocimientos y en el caso de estar equivocado, que otros desarrolladores entren y te dejen un feedback, ayudándote a que lo entiendas mejor y que se generen buenos debates.</p>
<p style="text-align: justify;">Por otra parte, una de las cosas importantes de este blog, es que lo estoy escribiendo &lt;&lt;para mí o mi "yo" del futuro&gt;&gt; tal y como escribió Carlos Blé en su post "<a href="http://www.carlosble.com/2015/07/te-recomiendo-escribir-en-un-blog/">te recomiendo escribir en un blog</a>". Además, si a alguien le es útil para aprender algo nuevo o reforzar lo que sabe, mejor que mejor.</p>
<p style="text-align: justify;">Espero poder aprender muchas cosas y postearlas, y si en un futuro se me olvidara algo o no lo recuerde con claridad, en vez de preguntar a Google y estar buscando y buscando, venir aquí donde está escrito con mis propias palabras :D</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1</wp:post_id>
		<wp:post_date><![CDATA[2015-07-30 23:08:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-30 23:08:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hola-mundo]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[4181762136]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[Carlos Ble]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ble.jurado@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.carlosble.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[62.175.247.91]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-09-30 16:44:04]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-09-30 16:44:04]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Enhorabuena Jose!
Compartir lo que aprendes supone un mejor aprendizaje, no dejes de hacerlo. Sin prisa pero sin pausa, sin agobio, hasta que le cojas el gusto.

Un abrazo]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
				<wp:meta_value><![CDATA[1443631444]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1443631444.6800499;s:5:"event";s:11:"check-error";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_delayed_moderation_email]]></wp:meta_key>
				<wp:meta_value><![CDATA[1]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1443635297.1584949;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"josedeniz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2282891082]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8</wp:comment_id>
			<wp:comment_author><![CDATA[josedeniz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[josema13992@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[193.145.150.119]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-09-30 17:53:24]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-09-30 17:53:24]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[¡Muchas gracias Carlos! Seguiré tu consejo :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>4</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_error]]></wp:meta_key>
				<wp:meta_value><![CDATA[1443635604]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1443635604.3529079;s:5:"event";s:11:"check-error";s:4:"user";s:9:"josedeniz";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2282891082]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2282891208]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Sample Page</title>
		<link>http://josemanueldeniz.es/sample-page/</link>
		<pubDate>Thu, 30 Jul 2015 23:08:05 +0000</pubDate>
		<dc:creator><![CDATA[josedeniz]]></dc:creator>
		<guid isPermaLink="false">http://188.226.218.6/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[This is an example page. It's different from a blog post because it will stay in one place and will show up in your site navigation (in most themes). Most people start with an About page that introduces them to potential site visitors. It might say something like this:

<blockquote>Hi there! I'm a bike messenger by day, aspiring actor by night, and this is my blog. I live in Los Angeles, have a great dog named Jack, and I like pi&#241;a coladas. (And gettin' caught in the rain.)</blockquote>

...or something like this:

<blockquote>The XYZ Doohickey Company was founded in 1971, and has been providing quality doohickeys to the public ever since. Located in Gotham City, XYZ employs over 2,000 people and does all kinds of awesome things for the Gotham community.</blockquote>

As a new WordPress user, you should go to <a href="http://188.226.218.6/wp-admin/">your dashboard</a> to delete this page and create new pages for your content. Have fun!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date><![CDATA[2015-07-30 23:08:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-30 23:08:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sample-page]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[4892394330]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Little Secret Kata</title>
		<link>http://josemanueldeniz.es/little-secret-kata/</link>
		<pubDate>Tue, 29 Sep 2015 23:20:29 +0000</pubDate>
		<dc:creator><![CDATA[josedeniz]]></dc:creator>
		<guid isPermaLink="false">http://josemanueldeniz.es/?p=32</guid>
		<description></description>
		<content:encoded><![CDATA[<p style="text-align: justify;">El fin de semana pasado, gracias a una recomendación de un compañero, me apunté en una página de katas que está bastante guay la verdad, se llama <em><a href="http://www.codewars.com/" target="_blank">codewars</a>.</em></p>
<p style="text-align: justify;">Básicamente, consiste en elegir la kata que más te guste, ya sea por dificultad (rango) o por lenguaje de programación (Java, C#, Haskell, Clojure, Python, Javascript...). Una vez la seleccionas, le das a intentar y te aparecen 3 ventanas: la ventana de <em>output</em>, la del <em>código</em> y la de los <em>tests</em> (en mi caso como era Java, eran tests en JUnit). Por último, al resolverla puedes ver las soluciones de otros usuarios y votar su solución como "buenas prácticas", "inteligente" o dejarles un <em>feedback.</em></p>
<p style="text-align: justify;">Bueno, pues la kata que me puse a resolver se llamaba <em>"</em><em>Everyone has his little secrets"</em>, o también conocida como <em>"Little Secret Kata"</em>. Una vez seleccionada me salió esto como descripción de la kata:</p>

<blockquote>Hello, I'm a little class and I have a secret. Will you find it?</blockquote>
<p style="text-align: justify;">A primera vista no te ayudaba mucho y te incitaba la curiosidad por resolverla, por lo que caí en la tentación y le di a <em>"intentar mi solución"</em>. Y me encontré con esto...</p>

<pre class="lang:java decode:true">public class Guesser {

    public void guess() {
        LittleSecret.isMySecret("thatILoveUnicorns");
    }

}</pre>
<p style="text-align: justify;">Una vez visto el código, seguía con dudas, por lo que dije, bueno vamos a ver los tests para entenderla mejor, pero para mi sorpresa ¡no había ninguno!. Así que fue el momento de pararme a pensar, mirar el código otra vez y empezar a &lt;&lt;<em>afilar el hacha&gt;&gt;</em>.</p>
<p style="text-align: justify;">Primero, le di a ejecutar los "tests" a ver si pasaba algo y la ventana de <em>output</em> se llenó de letras en rojo. Esto me dio pistas como por ejemplo el nombre de mi clase de test <strong><em>GuesserTest</em></strong> (no muy complicado de deducir tampoco...) y que la clase <strong><em>LittleSecret</em></strong> intentaba acceder a un campo booleano estático de mi clase <strong><em>GuesserTest</em></strong> llamado <em><strong>guessed</strong></em>. Por lo que <em>voilá</em>, ya tengo mi clase de test:</p>

<pre class="lang:java decode:true ">public class GuesserTest {

    public static boolean guessed;

    @Test
    public void is_guessed() {
        new Guesser().guess();
        assertTrue(guessed);
    }

}</pre>
<p style="text-align: justify;">Claramente todavía me faltaba resolverla... pero por más que me comía la cabeza y buscaba en google no lo conseguí...</p>
<p style="text-align: justify;">Como me quedé con la intriga, busqué soluciones de la kata. Y me quedé con el siguiente código:</p>

<pre class="lang:java decode:true">import java.lang.reflect.Field;

public class Guesser {

    public void guess() {
        for(Field field : LittleClass.class.getDeclaredFields()) {
            try {
                field.setAccessible(true);
                System.out.println(field.getName() + ": " + field.get(null));
            } catch(IllegalAccessException iae) {}
        }
        LittleClass.isMySecret("notVeryWellProtected");
    }

}</pre>
<p style="text-align: justify;">Al verlo, rápidamente lo entendí ya que la solución era por <strong><em>reflection, </em></strong>concepto que conocía en su forma teórica pero nunca lo había puesto en práctica. De forma breve,<strong><em> reflection </em></strong>es la capacidad qu<span id="result_box" class="" lang="es"><span class="hps">e tiene un programa</span> <span class="hps alt-edited">para examinarse</span> <span class="hps alt-edited">a sí misma</span> <span class="hps">en tiempo de ejecución</span><span class="">.</span></span></p>
<p style="text-align: justify;">Bueno, volviendo a la kata en cuestión y después de esta breve definición, la solución consistía en cambiar la accesibilidad del campo estático <em><strong>secret</strong></em> de la clase <strong><em>LittleClass</em></strong> de <strong><em>private</em></strong> a <strong><em>public</em></strong> para poder acceder a él.</p>
<p style="text-align: justify;">Una vez entendido, hice mi versión <em>refactorizando</em> el código un poco y dejándolo más limpio, por lo que mi solución final fue:</p>

<pre class="lang:java decode:true ">public class Guesser {

    private final int FIRST_FIELD = 0;

    public void guess() {
        Field field = LittleClass.class.getDeclaredFields()[FIRST_FIELD];
        try {
            LittleClass.isMySecret(secret(field));
        } catch(IllegalAccessException iae) { }
    }

    private String secret(Field field) throws IllegalAccessException {
        field.setAccessible(true);
        return String.valueOf(field.get(null));
    }

}</pre>
<p style="text-align: justify;">El parámetro del <strong><em>field.get()</em></strong> es <em><strong>null</strong></em> ya que según el <em>Javadoc dice:</em></p>

<blockquote>
<p style="text-align: center;">If the underlying field is a static field, the object argument is ignored; It may be null.</p>
</blockquote>
<p style="text-align: justify;">Más tarde, encontré el <a href="https://github.com/superbob/cw-kata-littlesecret" target="_blank">repositorio</a> del usuario que creó la kata y pude ver el código de la clase <em><strong>LittleClass</strong></em>.</p>
<p style="text-align: justify;">A modo de conclusión o retrospectiva quiero destacar que, aunque estuviese un poco desanimado por no resolverla yo mismo, estoy contento de haberme encontrado con esta kata ya que aprendí cosas nuevas y muy interesantes. Y además, me anima a seguir realizando más katas para seguir aprendiendo y mejorando como desarrollador.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>32</wp:post_id>
		<wp:post_date><![CDATA[2015-09-29 23:20:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-29 23:20:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[little-secret-kata]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="kata"><![CDATA[Kata]]></category>
		<category domain="post_tag" nicename="reflection"><![CDATA[Reflection]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[4181767345]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Java 8 Date and Time API</title>
		<link>http://josemanueldeniz.es/java-8-date-and-time-api/</link>
		<pubDate>Thu, 01 Oct 2015 21:17:20 +0000</pubDate>
		<dc:creator><![CDATA[josedeniz]]></dc:creator>
		<guid isPermaLink="false">http://josemanueldeniz.es/?p=62</guid>
		<description></description>
		<content:encoded><![CDATA[<p style="text-align: justify;">¿Quién no se ha pasado su tiempo con la clase <strong><em>Date</em></strong> o <em><strong>GregorianCalendar</strong></em>, y ha estado a punto de tirar el ordenador por la ventana gracias a ello? Pues entonces esto te va a interesar.</p>
Empecemos hablando un poco de cada clase.
<h3 style="text-align: justify;"><span style="text-decoration: underline;">LocalDate</span></h3>
<p style="text-align: justify;">Representa una fecha en el formato <em>año-mes-día</em>, ideal para guardar fechas de cumpleaños o la fecha de un evento.</p>

<pre class="lang:java decode:true">LocalDate today = LocalDate.now();
System.out.println("Today is: " + today);

&gt;&gt; Today is: 2015-10-01</pre>
O también tenemos esta forma de hacerlo:
<pre class="lang:java decode:true">LocalDate GDCRDate = LocalDate.of(2015, 11, 14);
System.out.println("The date of the next GDCR is: " + GDCRDate);

&gt;&gt; The date of the next GDCR is: 2015-11-14</pre>
<p style="text-align: justify;">Pero... ¿qué pasa si queremos mostrarla como normalmente leemos una fecha?. No pasa nada, para eso existen los <em><strong>DateTimeFormatters</strong></em>.</p>

<pre class="lang:java decode:true ">LocalDate today = LocalDate.now();
DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
System.out.println("Today is: " + dateFormatter.format(today));

&gt;&gt; Today is: 01/10/2015</pre>
&nbsp;
<h3><span style="text-decoration: underline;">LocalTime</span></h3>
<p style="text-align: justify;">Representa una hora en el formato <em><span class="pl-c">hh:mm:ss.ms</span></em>. Por ejemplo, ¿qué hora es?</p>

<pre class="lang:java decode:true">LocalTime localTime = LocalTime.now();
System.out.println("It's " + localTime);

&gt;&gt; It's 12:11:10.050</pre>
&nbsp;
<h3><span style="text-decoration: underline;">LocalDateTime</span></h3>
<p style="text-align: justify;">Es la fecha completa compuesta por una fecha y una hora en el formato <em><span class="pl-c">año-mes-díaThh:mm:ss.ms</span></em><span class="pl-c"> (es la concatenación de <strong><em>LocalDate</em></strong> + "T" + <strong><em>LocalTime</em></strong>).</span></p>

<pre class="lang:java decode:true">LocalDateTime today = LocalDateTime.now();
System.out.println("It's " + today);

&gt;&gt; It's 2015-10-01T12:11:10.050</pre>
&nbsp;
<h3><span style="text-decoration: underline;">ZonedDateTime</span></h3>
Representa una fecha completa con su zona horaria.
<pre class="lang:java decode:true ">ZonedDateTime today = ZonedDateTime.now();
System.out.println("It's " + today);

&gt;&gt; It's 2015-10-01T19:27:54.163+01:00[Atlantic/Canary]</pre>
&nbsp;

Con esta última clase terminamos una introducción básica a la API nueva de <em>Date and Time</em> de Java 8. Espero que te sirva de ayuda y dejes de usar la calculadora para ver cuánto tiempo, en milisegundos, han pasado desde el 1 de Enero de 1970 a las 00:00.
<ul>
	<li style="text-align: left;"><em>Link</em>: Código fuente en <a href="https://github.com/JoseDeniz/Java-8-Basic-Examples/blob/master/src/main/java/java8/date_and_time_example/TypesOfDatesAndTimesExample.java" target="_blank">GitHub</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>62</wp:post_id>
		<wp:post_date><![CDATA[2015-10-01 21:17:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-01 21:17:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[java-8-date-and-time-api]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="date"><![CDATA[Date]]></category>
		<category domain="post_tag" nicename="datetime"><![CDATA[DateTime]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="java-8"><![CDATA[Java 8]]></category>
		<category domain="post_tag" nicename="java8"><![CDATA[Java8]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[4184903445]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Refactorizando con Streams</title>
		<link>http://josemanueldeniz.es/refactorizando-con-streams/</link>
		<pubDate>Thu, 08 Oct 2015 18:50:52 +0000</pubDate>
		<dc:creator><![CDATA[josedeniz]]></dc:creator>
		<guid isPermaLink="false">http://josemanueldeniz.es/?p=69</guid>
		<description></description>
		<content:encoded><![CDATA[<p style="text-align: justify;">Hoy traigo una serie de ejemplos de refactorización a modo de introducción a las nuevas características funcionales de Java 8. Así que, si tenías curiosidad y no te habías atrevido a experimentar con ellas, ¡te animo a que pruebes!</p>
Empezamos definiendo una clase <em>Person</em> básica con un nombre y una edad:
<pre class="lang:java decode:true">public class Person {

    private final String name;
    private final int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String name() {
        return name;
    }

    public int age() {
        return age;
    }

    @Override
    public String toString() {
        return name + " - " + age;
    }

}</pre>
<p style="text-align: justify;">Una vez definida nuestra clase base, vamos a hacer un ejemplo sencillo: tenemos una lista de personas y queremos tener otra lista pero <strong>sólo</strong> con las personas que sean <strong>mayores de 22 años</strong>.</p>

<pre class="lang:java decode:true">public static void main(String[] args) {

    List&lt;Person&gt; people = new ArrayList&lt;&gt;();
    persons.add(new Person("Ronny", 20));
    persons.add(new Person("Nick", 21));
    persons.add(new Person("Angelo", 21));
    persons.add(new Person("Miguel", 22));
    persons.add(new Person("Juan", 22));
    persons.add(new Person("Dani", 23));
    persons.add(new Person("Jose", 23));
    persons.add(new Person("Ruben", 23));

    List&lt;Person&gt; peopleOlderThanTwentyTwo = getPeopleOlderThanTwentyTwo(people);

    System.out.println(peopleOlderThanTwentyTwo);
}

private static List&lt;Person&gt; getPeopleOlderThanTwentyTwo(List&lt;Person&gt; people) {
    List&lt;Person&gt; peopleOlderThanTwentyTwo = new ArrayList&lt;&gt;();
    for (Person person : people)
        if (person.age() &gt; 22)
            peopleOlderThanTwentyTwo.add(person);
    return peopleOlderThanTwentyTwo;
}</pre>
<p style="text-align: justify;">Y ahora usando Java 8:</p>

<pre class="lang:java decode:true">public static void main(String[] args) {

    List&lt;Person&gt; people = Arrays.asList(new Person("Ronny", 20), new Person("Nick", 21),
                                        new Person("Angelo", 21), new Person("Miguel", 22),
                                        new Person("Juan", 22), new Person("Dani", 23),
                                        new Person("Jose", 23), new Person("Ruben", 23));

    List&lt;Person&gt; peopleOlderThanTwentyTwo = getPeopleOlderThanTwentyTwo(people);

    System.out.println(peopleOlderThanTwentyTwo);
}

private static List&lt;Person&gt; getPeopleOlderThanTwentyTwo(List&lt;Person&gt; people) {
    return people.stream()
                 .filter(person -&gt; person.age() &gt; 22)
                 .collect(Collectors.toList());
}</pre>
<p style="text-align: justify;">Vamos a explicarlo un poco. Primero tenemos el método <strong><em>stream()</em></strong>, propio de las colecciones, que devuelve un <em><strong>Stream</strong></em> (conjunto inmutable de elementos y una serie de funciones con las que operar sobre el mismo). Seguimos con la función <strong><em>filter</em></strong> que, como su nombre indica, filtra los elementos a partir de un <strong>predicado</strong> (función que evalúa un argumento siendo el resultado <em>verdadero</em> o <em>falso).</em> Y por último<em>,</em> tenemos que volver a transformar el <em>stream</em> en una lista, por lo que llamamos a la función <strong><em>collect</em></strong> y nos ayudamos de los <em><strong>Collectors</strong></em> para ello.</p>
<p style="text-align: justify;">Podemos extraer el predicado en una variable para tener una mejor legibilidad:</p>

<pre class="lang:java decode:true">private static List&lt;Person&gt; getPeopleOlderThanTwentyTwo(List&lt;Person&gt; people) {
    Predicate&lt;Person&gt; isOlderThanTwentyTwo = person -&gt; person.age() &gt; 22;
    return people.stream()
                 .filter(isOlderThanTwentyTwo)
                 .collect(Collectors.toList());
}</pre>
&nbsp;
<p style="text-align: justify;">Ahora pongamos otro ejemplo. Seguimos teniendo la misma lista de personas pero ahora queremos un <strong>String</strong> que contenga los <strong>nombres</strong> de las personas que sean <strong>menores de 22 años</strong> separados por <strong>", "</strong>.</p>

<pre class="lang:java decode:true">private static String getNamesOfPeopleYoungerThanTwentyTwo(List&lt;Person&gt; people) {
    String names = "";
    for (Person person : people)
        if (person.age() &lt; 22)
            names += person.name() + ", ";
    return names.substring(0, names.length() - 2);
}</pre>
<p style="text-align: justify;">Java 8:</p>

<pre class="lang:java decode:true">private static String getNamesOfPeopleYoungerThanTwentyTwo(List&lt;Person&gt; people) {
    Predicate&lt;Person&gt; isYoungerThanTwentyTwo = person -&gt; person.age() &lt; 22;
    return people.stream()
                 .filter(isYoungerThanTwentyTwo)
                 .map(Person::name)
                 .collect(Collectors.joining(", "));
}</pre>
<p style="text-align: justify;">En este ejemplo, vemos varias cosas nuevas como la función <em><strong>map</strong></em>, que devuelve un nuevo <em>Stream</em> del mismo tamaño, pero con la diferencia que cada elemento es el resultado de aplicar la función pasada por parámetro sobre cada uno de ellos (en este caso, me devuelve un <em>Stream</em> de <em>String)</em>. Además, vemos como podemos sustituir nuestra función <em>lambda</em> por una referencia al método, es  decir, hemos sustituído:</p>

<pre class="lang:java decode:true">person -&gt; person.name()</pre>
<p style="text-align: justify;">Por:</p>

<pre class="lang:java decode:true">Person::name</pre>
<p style="text-align: justify;">Ya que queda más compacto y fácil de leer. Y por último, unimos todos los nombres separados por <em><strong>","</strong></em> sin tener que estar preocupándonos en si se nos añade o no una <em><strong>","</strong></em> de más.<em>
</em></p>
A modo de conclusión, me gustaría resaltar un principio del desarrollo del software, que podemos apreciar en los ejemplos, llamado <strong><em>Tell-Don't-Ask</em></strong>. Este, nos recuerda que en lugar de <em><strong>pedir</strong></em> datos a un objeto y <em><strong>actuar</strong></em> sobre ellos, deberíamos decirle al objeto <em><strong>qué hacer</strong></em>. Esto ayuda a que puedas leer el código de una manera más clara y que cualquiera pueda entenderlo al quedar este mucho más limpio. Por ello, te recomiendo que lo tengas en cuenta puesto que no es sólo útil para ti, sino también para cualquier otro que vea el código en un futuro.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>69</wp:post_id>
		<wp:post_date><![CDATA[2015-10-08 18:50:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-08 18:50:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[refactorizando-con-streams]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="java-8"><![CDATA[Java 8]]></category>
		<category domain="post_tag" nicename="java8"><![CDATA[Java8]]></category>
		<category domain="post_tag" nicename="refactor"><![CDATA[Refactor]]></category>
		<category domain="post_tag" nicename="stream"><![CDATA[Stream]]></category>
		<category domain="post_tag" nicename="tell-dont-ask"><![CDATA[Tell-Don't-Ask]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[4206818331]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>23</wp:comment_id>
			<wp:comment_author><![CDATA[rubendm]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[rubendm92@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[85.155.204.194]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-11-25 17:42:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-11-25 17:42:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Mola, aunque has hecho un poco trampa usando un new ArrayList() y luego los add's en el ejemplo con el for y luego usas el asList (que se ve más corto) en el ejemplo de Java 8 jajaja.
Respecto a los Predicate, yo soy más partidario de sacarlo a un método en lugar de dejar una variable :)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2378450940]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>24</wp:comment_id>
			<wp:comment_author><![CDATA[Jose Manuel Deniz Suarez]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[josema13992@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://josemanueldeniz.es</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[188.87.36.232]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-11-25 20:46:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-11-25 20:46:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[En mi defensa diré que pensaba que el Arrays.asList() era nuevo en Java 8. De todas formas viene perfecto para aprender otra forma de crear listas.

Y respecto a los Predicate, no suelo extraerlos en métodos pero me gusta tu forma de hacerlo, así que te la copio jejejeje. Además, no se ve mal en este ejemplo  ya que es sencillo y queda compacto  :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>23</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2378450940]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2378772175]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>IntelliJ Plugin (Primera Parte)</title>
		<link>http://josemanueldeniz.es/?p=94</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[josedeniz]]></dc:creator>
		<guid isPermaLink="false">http://josemanueldeniz.es/?p=94</guid>
		<description></description>
		<content:encoded><![CDATA[Paso 0.

Bueno, lo primero de todo es descargarse del github la versión community de IntelliJ.

Luego, new project --&gt; Plugin project --&gt; seleccionar la versión de IntelliJ que usará cuando se le de a ejecutar y cree una instancia de IntelliJ.

Paso 1. Crear el tool window

Ir a la carpeta META-INF y abrir el archivo .xml, rellenar los datos como el nombre, la id, el logo, etc etc...

Paso 2. Leer, leer y seguir leyendo código para entender cómo funciona]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>94</wp:post_id>
		<wp:post_date><![CDATA[2015-11-08 14:33:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mi lista de lectura</title>
		<link>http://josemanueldeniz.es/mi-lista-de-lectura/</link>
		<pubDate>Sun, 08 Nov 2015 16:13:57 +0000</pubDate>
		<dc:creator><![CDATA[josedeniz]]></dc:creator>
		<guid isPermaLink="false">http://josemanueldeniz.es/?p=99</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
	<li style="text-align: justify;">Clean Code by Robert C. Martin</li>
	<li style="text-align: justify;">The Pragmatic Programmer, David Thomas</li>
	<li>eXtreme Programming Explained, Kent Beck</li>
	<li style="text-align: justify;">Structure and Interpretation of Computer Programs, <span class="a-size-medium">Gerald Jay Sussman</span></li>
	<li style="text-align: justify;">Working effectively with legacy code, Michael Feathers</li>
	<li style="text-align: justify;">Head First Design Patterns</li>
	<li style="text-align: justify;">Exercises for Programmers: 57 Challenges to Develop Your Coding Skills.</li>
	<li style="text-align: justify;">Code Complete 2nd edition by Steve McConnell</li>
	<li style="text-align: justify;">Test Driven Development by Example, Kent Beck</li>
	<li style="text-align: justify;">Growing Object-Oriented Software Guided by Tests, Freeman &amp; Pryce</li>
	<li style="text-align: justify;">JavaScript The Good Parts, Douglas Crockford</li>
	<li style="text-align: justify;">Test-Driven JavaScript Development, Christian Johansen</li>
	<li style="text-align: justify;">JavaScript Allonge, Reginal Braithwaite</li>
	<li style="text-align: justify;">Implementing Domain Driven Design, Vaughn Vernon</li>
</ul>
<p style="text-align: justify;"><strong>Leyendo:</strong></p>

<ul style="text-align: justify;">
	<li>Practical Object-Oriented Design in Ruby, Sandi Metz</li>
	<li>Refactoring, Martin Fowler</li>
</ul>
<p style="text-align: justify;"><strong>Leídos:</strong></p>

<ul>
	<li style="text-align: justify;">Functional Programming in Java by Venkat Subramaniam</li>
	<li style="text-align: justify;">O'Reilly - Introducing Java 8. A Quick-Start Guide to Lambdas and Streams.</li>
	<li style="text-align: justify;">Apprenticeship Patterns, Hoover &amp; Oshineye</li>
	<li>Software Craftsmanship, Sandro Mancuso</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>99</wp:post_id>
		<wp:post_date><![CDATA[2015-11-08 16:13:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-08 16:13:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mi-lista-de-lectura]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="libros"><![CDATA[Libros]]></category>
		<category domain="post_tag" nicename="libros"><![CDATA[Libros]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[4300741382]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Photo1</title>
		<link>http://josemanueldeniz.es/dsc_0274/</link>
		<pubDate>Fri, 11 Dec 2015 10:01:36 +0000</pubDate>
		<dc:creator><![CDATA[josedeniz]]></dc:creator>
		<guid isPermaLink="false">http://josemanueldeniz.es/wp-content/uploads/2015/12/DSC_0274.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>105</wp:post_id>
		<wp:post_date><![CDATA[2015-12-11 10:01:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-11 10:01:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[dsc_0274]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://josemanueldeniz.es/wp-content/uploads/2015/12/DSC_0274.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/DSC_0274.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1920;s:6:"height";i:1080;s:4:"file";s:20:"2015/12/DSC_0274.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"DSC_0274-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:20:"DSC_0274-300x169.jpg";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:20:"DSC_0274-768x432.jpg";s:5:"width";i:768;s:6:"height";i:432;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:21:"DSC_0274-1024x576.jpg";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:20:"DSC_0274-825x510.jpg";s:5:"width";i:825;s:6:"height";i:510;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";d:2.7999999999999998;s:6:"credit";s:0:"";s:6:"camera";s:5:"D6603";s:7:"caption";s:0:"";s:17:"created_timestamp";i:1449751433;s:9:"copyright";s:0:"";s:12:"focal_length";s:4:"1.81";s:3:"iso";s:2:"50";s:13:"shutter_speed";s:7:"0.00125";s:5:"title";s:0:"";s:11:"orientation";i:1;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Photo2</title>
		<link>http://josemanueldeniz.es/dsc_0279-copia/</link>
		<pubDate>Fri, 11 Dec 2015 10:05:57 +0000</pubDate>
		<dc:creator><![CDATA[josedeniz]]></dc:creator>
		<guid isPermaLink="false">http://josemanueldeniz.es/wp-content/uploads/2015/12/DSC_0279-copia.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>106</wp:post_id>
		<wp:post_date><![CDATA[2015-12-11 10:05:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-11 10:05:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[dsc_0279-copia]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://josemanueldeniz.es/wp-content/uploads/2015/12/DSC_0279-copia.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/DSC_0279-copia.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2551;s:6:"height";i:1434;s:4:"file";s:26:"2015/12/DSC_0279-copia.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"DSC_0279-copia-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:26:"DSC_0279-copia-300x169.jpg";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:26:"DSC_0279-copia-768x432.jpg";s:5:"width";i:768;s:6:"height";i:432;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:27:"DSC_0279-copia-1024x576.jpg";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:26:"DSC_0279-copia-825x510.jpg";s:5:"width";i:825;s:6:"height";i:510;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";d:2;s:6:"credit";s:0:"";s:6:"camera";s:5:"D6603";s:7:"caption";s:0:"";s:17:"created_timestamp";i:1449751492;s:9:"copyright";s:0:"";s:12:"focal_length";s:3:"4.6";s:3:"iso";s:2:"50";s:13:"shutter_speed";s:9:"0.0003125";s:5:"title";s:0:"";s:11:"orientation";i:1;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-DSC_0279-copia.jpg</title>
		<link>http://josemanueldeniz.es/cropped-dsc_0279-copia-jpg/</link>
		<pubDate>Fri, 11 Dec 2015 10:07:35 +0000</pubDate>
		<dc:creator><![CDATA[josedeniz]]></dc:creator>
		<guid isPermaLink="false">http://josemanueldeniz.es/wp-content/uploads/2015/12/cropped-DSC_0279-copia.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>107</wp:post_id>
		<wp:post_date><![CDATA[2015-12-11 10:07:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-11 10:07:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-dsc_0279-copia-jpg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://josemanueldeniz.es/wp-content/uploads/2015/12/cropped-DSC_0279-copia.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2015/12/cropped-DSC_0279-copia.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:954;s:6:"height";i:1300;s:4:"file";s:34:"2015/12/cropped-DSC_0279-copia.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"cropped-DSC_0279-copia-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:34:"cropped-DSC_0279-copia-220x300.jpg";s:5:"width";i:220;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:35:"cropped-DSC_0279-copia-768x1047.jpg";s:5:"width";i:768;s:6:"height";i:1047;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:35:"cropped-DSC_0279-copia-751x1024.jpg";s:5:"width";i:751;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:34:"cropped-DSC_0279-copia-825x510.jpg";s:5:"width";i:825;s:6:"height";i:510;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Refactorizando Try - Catch (Functional Programming)</title>
		<link>http://josemanueldeniz.es/refactorizando-try-catch-functional-programming/</link>
		<pubDate>Tue, 15 Dec 2015 16:10:03 +0000</pubDate>
		<dc:creator><![CDATA[josedeniz]]></dc:creator>
		<guid isPermaLink="false">http://josemanueldeniz.es/?p=108</guid>
		<description></description>
		<content:encoded><![CDATA[<p style="text-align: justify;">Hace unos días, empecé un proyecto personal para mejorar algunas tecnologías, como por ejemplo, conexión con bases de datos o trabajar con <a href="http://sparkjava.com/" target="_blank">Spark</a> para hacer un servicio Rest.</p>
<p style="text-align: justify;">Empecé con una idea muy sencilla, ya que lo que quería era empezar cuanto antes y, más adelante, ir incorporando nuevas <em>features</em> y encontrarme con problemas como ¿por qué hice esto de esta forma y no de esta otra?, ó también, "por tomar una determinada decisión me ha surgido un problema grande a la larga".</p>
<p style="text-align: justify;">La idea principal, es tener una tienda online donde tendré usuarios y productos, donde los almacenaré en una base de datos y proporcionar un servicio Rest.</p>
<p style="text-align: justify;">Primero, empecé por hacer un CRUD usando JDBC donde tengo una tabla de usuarios:</p>

<pre class="lang:mysql decode:true" title="Users Tabe">CREATE TABLE Users (user_id int(11) NOT NULL AUTO_INCREMENT,
                    username varchar(45) NOT NULL,
                    surname varchar(45) NOT NULL,
                    PRIMARY KEY (user_id));</pre>
<p style="text-align: justify;">Y mi clase User:</p>

<pre class="lang:java decode:true" title="User class">public class User {
    private final String name;
    private final String surname;

    public User(String name, String surname) {
        this.name = name;
        this.surname = surname;
    }

    public String name() {
        return name;
    }

    public String surname() {
        return surname;
    }
}</pre>
<p style="text-align: justify;">Una vez implementado el CRUD y refactorizado el código, me encontré con que no me podía quitar los bloques de <em>try/catch, </em>lo cuál me frustró mucho porque me parecían horribles. Pero, por casualidad o por cosas del destino, <a href="https://twitter.com/rubendm23" target="_blank">Rubén</a> compartió unos vídeos sobre patrones de diseño con Java 8, de los que quiero destacar la <a href="https://www.youtube.com/watch?v=K6BmGBzIqW0&amp;feature=youtu.be" target="_blank">charla</a> de <a href="https://twitter.com/mariofusco" target="_blank">Mario Fusco</a>.</p>
<p style="text-align: justify;">Entre otras cosas, recomendó <a href="http://javaslang.com/" target="_blank">javaslang</a>, una biblioteca funcional que añade, pequeñas, pero importantes mejoras a Java 8. Propone un ejemplo con la clase Try&lt;T&gt;, dicha clase es una mónada que puede devolver dos tipos de objetos: <em>Success</em> (objeto que contiene el valor) o <em>Failure</em> (objeto que contiene la excepción). Además, se le pueden aplicar funciones como <em>map</em> o <em>andThen</em>.</p>
<p style="text-align: justify;">Así era como se insertaba un usuario en la base de datos:</p>

<pre class="lang:java decode:true" title="Insert User before">public void add(Person person) {
    String sql = "INSERT INTO Users (username, fullname) VALUES (?, ?)";
    try (Connection connection = stablishConnection()) {
        if (connection != null) {
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, person.name());
            statement.setString(2, person.fullname());
            statement.executeUpdate();
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
}</pre>
<p style="text-align: justify;">Y este es el método que establecía la conexión con la base de datos:</p>

<pre class="lang:java decode:true" title="stablishConnection">private Connection stablishConnection() {
    try {
        return DriverManager.getConnection(DB_URL, USER, PASSWORD);
    } catch (SQLException e) {
        e.printStackTrace();
        return null;
    }
}</pre>
<p style="text-align: justify;">¡Cuántos <em>try/catch</em>! ¡Vamos a refactorizar! Empecemos con el método que establecía la conexión:</p>

<pre class="lang:java decode:true" title="tryConnection">public static Try&lt;Connection&gt; tryConnection() {
    return Try.of(() -&gt; getConnection(DB_URL, USER, PASSWORD));
}</pre>
<p style="text-align: justify;">Y finalmente, con el método que inserta, extrayendo más métodos para dejar el código más limpio y legible.</p>

<pre class="lang:java decode:true" title="Insert Users After">public void add(User user) {
    tryConnection()
            .mapTry(this::prepareInsertUserStatement)
            .andThen(setNameOf(user))
            .andThen(setSurnameOf(user))
            .andThen(PreparedStatement::executeUpdate);
}</pre>
<p style="text-align: justify;">Personalmente, me ha gustado mucho haber descubierto esta manera de hacerlo, ya que me centro más en <strong>qué</strong> quiero hacer en vez de <strong>cómo</strong> lo quiero hacer.</p>
<p style="text-align: justify;">Por último, me gustaría recordar que el proyecto es para aprender y cualquier <em>feedback</em> será muy bien recibido :D</p>

<ul>
	<li style="text-align: justify;">Link proyecto: <a href="https://github.com/JoseDeniz/A2Ztore" target="_blank">GitHub</a></li>
	<li style="text-align: justify;">Link: Otro <a href="https://github.com/JoseDeniz/Java-8-Basic-Examples/blob/master/src/main/java/javaslang/try_monad_example/ReadLinesFromFileExample.java" target="_blank">ejemplo</a> usando la clase Try</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>108</wp:post_id>
		<wp:post_date><![CDATA[2015-12-15 16:10:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-15 16:10:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[refactorizando-try-catch-functional-programming]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="catch"><![CDATA[catch]]></category>
		<category domain="post_tag" nicename="functional-programming"><![CDATA[functional programming]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="java-8"><![CDATA[Java 8]]></category>
		<category domain="post_tag" nicename="java8"><![CDATA[Java8]]></category>
		<category domain="post_tag" nicename="javaslang"><![CDATA[javaslang]]></category>
		<category domain="post_tag" nicename="monad"><![CDATA[monad]]></category>
		<category domain="post_tag" nicename="try"><![CDATA[try]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[4406237863]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>25</wp:comment_id>
			<wp:comment_author><![CDATA[Nikita Tchayka]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[nikitatchayka@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[213.231.102.20]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-12-15 18:21:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-12-15 18:21:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA["Nick es un loco por usar programación funcional", "Nick es un loco por usar mónadas". Miralos, usando programación funcional y monádas. ¿Qué va a ser lo siguiente? Emacs? xD

Muy buen post, me ha gustado mucho leerlo y también el hecho de que la "brujería" funcional se vaya expandiendo.

Un saludo muy grande :)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2411174326]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>26</wp:comment_id>
			<wp:comment_author><![CDATA[Jose Manuel Deniz Suarez]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[josema13992@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://josemanueldeniz.es</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[193.145.150.119]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-12-16 12:52:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-12-16 12:52:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[¡Muchas gracias Nick! :D]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>25</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2411174326]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2412398007]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
</channel>
</rss>
